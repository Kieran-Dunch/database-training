-- SQL Queries donâ€™t just access raw data, they can also perform calculations
-- on the raw data to answer specific data questions.

-- Calculations performed on multiple rows of a table are called aggregates.



-- COUNT() counts the number of rows in the column
-- SUM() adds up all the values in the column
-- AVG() calculates the average of values in the column
-- MAX()/MIN() gets the maximum/minimum value of the column
-- ROUND() rounds the values in the column

-- COUNT()
-- COUNT() is a function that takes the name of a column as an argument
-- and counts the number of non-NULL values in that column.

SELECT COUNT(*)
FROM table_name;

SELECT COUNT(*)
FROM fake_apps
WHERE price == 0;

-- SUM()
-- SUM() is a function that takes the name of a column as an argument
-- and returns the sum of all the values in that column.

SELECT SUM(column_name)
FROM table_name;


SELECT SUM(downloads)
FROM fake_apps;

-- MAX() and MIN()
-- MAX() and MIN() are functions that return the highest and lowest values in a
-- column, respectively.

SELECT MAX(downloads)
FROM fake_apps;

SELECT MIN(downloads)
FROM fake_apps;

-- AVG()
-- AVG() is a function that takes the name of a column as an argument
-- and returns the average value of that column.

SELECT AVG(downloads)
FROM fake_apps;

SELECT AVG(price)
FROM fake_apps;

-- ROUND()
-- ROUND() is a function that takes a column name and an integer as arguments.
-- It rounds the values in the column to the number of decimal places specified
-- by the integer.

SELECT ROUND(price, 0)
FROM fake_apps;

-- Combining Aggregate Functions
SELECT ROUND(AVG(price), 2)
FROM fake_apps;

-- GROUP_BY
-- GROUP BY is a clause in SQL that is used with aggregate functions.
-- It is used in collaboration with the SELECT statement to arrange identical
-- data into groups.

SELECT price, COUNT(*)
FROM fake_apps
GROUP BY price;

SELECT price, COUNT(*)
FROM fake_apps
GROUP BY price
ORDER BY price;

SELECT price, COUNT(*)
FROM fake_apps
WHERE downloads > 20000
GROUP BY price;

SELECT category, SUM(downloads)
FROM fake_apps
GROUP BY category;

-- GROUP_BY with calculations

-- we can use GROUP BY with number values substituting the column name

SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY ROUND(imdb_rating)
ORDER BY ROUND(imdb_rating);

-- Can turn into

SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY 1
ORDER BY 1;


-- HAVING
-- HAVING statement is used in combination with the GROUP BY clause to restrict
-- the groups of returned rows to only those whose the condition is TRUE.

SELECT price,
  ROUND(AVG(downloads)),
  COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(name) > 10;
