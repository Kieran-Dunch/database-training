-- selects all the movies from the movies table
SELECT * FROM movies;

-- Select multiple columns from the movies table

SELECT name, genre FROM movies;

-- line breaks don't matter in SQL, but they can make your queries easier to read

SELECT name, genre, year
FROM movies;

-- Using the AS keyword with select to rename columns

SELECT name AS 'Movie Name', genre AS 'Movie Genre', year AS 'Release Year'
FROM movies;

-- distinct keyword to remove duplicates from the result set
SELECT DISTINCT genre
FROM movies;

-- where clause to filter the result set
SELECT *
FROM movies
WHERE genre = 'comedy';

-- can be used to add a comparison too
SELECT *
FROM movies
WHERE genre = 'comedy' AND year > 2000;

-- can also use OR
SELECT *
FROM movies
WHERE genre = 'comedy' OR year > 2000;

-- can also use IN
SELECT *
FROM movies
WHERE genre IN ('comedy', 'action');

-- can also use NOT IN
SELECT *
FROM movies
WHERE genre NOT IN ('comedy', 'action');

-- can also use BETWEEN
SELECT *
FROM movies
WHERE year BETWEEN 2000 AND 2010;

-- with alphabetical values
SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';

-- can also use NOT BETWEEN
SELECT *
FROM movies
WHERE year NOT BETWEEN 2000 AND 2010;

-- can also use LIKE
SELECT *
FROM movies
WHERE name LIKE 'A%';

-- like can also be used with wildcards
SELECT *
FROM movies
WHERE name LIKE 'Se_en'; -- finds Seven and Se7en

-- like unlocks a lot of possibilities using SQL's syntax
-- % is a wildcard that matches zero or more characters
-- you can use it before or after a specific string or character
SELECT *
FROM movies
WHERE name LIKE '%man%';

SELECT *
FROM movies
WHERE name LIKE 'The %';

-- is null can be used to find null values
SELECT *
FROM movies
WHERE genre IS NULL;

-- can also use IS NOT NULL
SELECT *
FROM movies
WHERE genre IS NOT NULL;


-- AND and OR can be combined in a single query
-- These will combine multiple conditions in a single query
SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
  AND imdb_rating > 8;

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
  OR imdb_rating > 8;

SELECT *
FROM movies
WHERE genre = 'romance'
  OR genre = 'comedy';

-- ORDER BY can be used to sort the result set
SELECT *
FROM movies
ORDER BY year;

-- can also use DESC to sort in descending order
SELECT *
FROM movies
ORDER BY year DESC;

-- ORDER BY always goes after WHERE, if WHERE is used
SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;

-- LIMIT can be used to limit the number of rows returned
SELECT *
FROM movies
ORDER BY year DESC
LIMIT 5;

-- not every SQL database supports LIMIT, but most do
SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;

-- CASE can be used to create a new column based on a condition
SELECT name,
CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy' THEN 'Chill'
  ELSE 'Intense'
  END AS 'Mood'
FROM movies;

-- can also use CASE with comparison operators
SELECT name,
CASE
  WHEN imdb_rating > 7 THEN 'Good'
  ELSE 'Bad'
  END AS 'Review'
FROM movies;
