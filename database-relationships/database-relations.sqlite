-- One to one relationship
// -- tables, ensuring that the values in the foreign key column match the values
// -- in the primary key column of the referenced table.
CREATE TABLE users (
  user_id integer PRIMARY KEY,
  username varchar(50) NOT NULL
);
CREATE TABLE profiles (
  profile_id integer PRIMARY KEY,
  user_id integer UNIQUE,
  bio text,
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);
-- In this example, the profiles table has a foreign key user_id that references
-- the user_id column in the users table. This establishes a one-to-one relationship
-- between the users and profiles tables, ensuring that each user has a unique
-- profile and that each profile belongs to a single user.

CREATE TABLE book_details (
  id integer PRIMARY KEY,
  book_isbn varchar(50) REFERENCES book(isbn) UNIQUE,
  rating decimal,
  language varchar(10),
  keywords text[],
  date_published date
);

SELECT
  constraint_name, table_name, column_name
FROM
  information_schema.key_column_usage
WHERE
  table_name = 'book_details';

INSERT INTO book VALUES (
  'Learn PostgreSQL',
  '123457890',
  100,
  2.99,
  'Great course',
  'Codecademy'
);

INSERT INTO book_details VALUES (
  1,
  '123457890',
  3.95,
  'English',
  '{sql, postgresql, database}',
  '2020-05-20'
);

INSERT INTO book_details VALUES (
  2,
  '123457890',
  3.95,
  'French',
  '{sql, postgresql, database}',
  '2020-05-20'
);

SELECT
    book.title, book.price, book_details.language, book_details.rating
FROM book
JOIN book_details
ON book.isbn = book_details.book_isbn;

-- In this example, the book_details table has a foreign key book_isbn that
-- references the isbn column in the book table. This establishes a one-to-one
-- relationship between the book and book_details tables, ensuring that each
-- book has a unique set of details and that each set of details belongs to a
-- single book. The UNIQUE constraint on book_isbn ensures that each book can
-- only have one set of details in the book_details table, preventing duplicate
-- entries for the same book.

-- one to many relationship
CREATE TABLE authors (
  author_id integer PRIMARY KEY,
  name varchar(100) NOT NULL
);
CREATE TABLE books (
  book_id integer PRIMARY KEY,
  title varchar(100) NOT NULL,
  author_id integer,
  FOREIGN KEY (author_id) REFERENCES authors(author_id)
);
-- In this example, the books table has a foreign key author_id that references
-- the author_id column in the authors table. This establishes a one-to-many
-- relationship between the authors and books tables, allowing each author to
-- have multiple books, while each book is associated with a single author.

INSERT INTO authors (author_id, name) VALUES (1, 'John Doe');
INSERT INTO books (book_id, title, author_id) VALUES (1, 'PostgreSQL Basics', 1);
INSERT INTO books (book_id, title, author_id) VALUES (2, 'Advanced PostgreSQL', 1);
INSERT INTO books (book_id, title, author_id) VALUES (3, 'PostgreSQL Performance Tuning', 1);
-- This example shows how to create a one-to-many relationship between authors and books.
-- Each author can have multiple books, while each book is associated with a single author.

-- many to many relationship
-- a student can enroll in multiple courses, and a course can have multiple students.
CREATE TABLE students (
  student_id integer PRIMARY KEY,
  name varchar(100) NOT NULL
);
CREATE TABLE courses (
  course_id integer PRIMARY KEY,
  title varchar(100) NOT NULL
);
CREATE TABLE enrollments (
  student_id integer,
  course_id integer,
  PRIMARY KEY (student_id, course_id),
  FOREIGN KEY (student_id) REFERENCES students(student_id),
  FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
-- In this example, the enrollments table serves as a junction table that connects
-- the students and courses tables. The student_id and course_id columns in the
-- enrollments table form a composite primary key, ensuring that each student can
-- enroll in multiple courses, and each course can have multiple students. The
-- foreign keys in the enrollments table reference the primary keys of the students
-- and courses tables, establishing the many-to-many relationship.

-- a note on composite keys
CREATE TABLE composite_example (
  part_id integer,
  component_id integer,
  PRIMARY KEY (part_id, component_id),
  FOREIGN KEY (part_id) REFERENCES parts(part_id),
  FOREIGN KEY (component_id) REFERENCES components(component_id)
);
-- In this example, the composite_example table has a composite primary key
-- consisting of part_id and component_id. This means that each combination of
-- part_id and component_id must be unique within the table. The foreign keys
-- reference the primary keys of the parts and components tables, establishing
-- relationships with those tables. The composite primary key ensures that each
-- part can have multiple components, and each component can be associated with
-- multiple parts, while still maintaining the uniqueness of each combination
-- of part_id and component_id.

-- This is useful in scenarios where you need to track relationships between
-- two entities that can have multiple associations, such as parts and components
-- in a manufacturing context, where each part can consist of multiple components,
-- and each component can be used in multiple parts. The composite primary key
-- ensures that the combination of part_id and component_id is unique, preventing
-- duplicate entries for the same part-component relationship.
