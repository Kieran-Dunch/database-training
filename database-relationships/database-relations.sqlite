-- One to one relationship
// -- tables, ensuring that the values in the foreign key column match the values
// -- in the primary key column of the referenced table.
CREATE TABLE users (
  user_id integer PRIMARY KEY,
  username varchar(50) NOT NULL
);
CREATE TABLE profiles (
  profile_id integer PRIMARY KEY,
  user_id integer UNIQUE,
  bio text,
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);
-- In this example, the profiles table has a foreign key user_id that references
-- the user_id column in the users table. This establishes a one-to-one relationship
-- between the users and profiles tables, ensuring that each user has a unique
-- profile and that each profile belongs to a single user.

CREATE TABLE book_details (
  id integer PRIMARY KEY,
  book_isbn varchar(50) REFERENCES book(isbn) UNIQUE,
  rating decimal,
  language varchar(10),
  keywords text[],
  date_published date
);

SELECT
  constraint_name, table_name, column_name
FROM
  information_schema.key_column_usage
WHERE
  table_name = 'book_details';

INSERT INTO book VALUES (
  'Learn PostgreSQL',
  '123457890',
  100,
  2.99,
  'Great course',
  'Codecademy'
);

INSERT INTO book_details VALUES (
  1,
  '123457890',
  3.95,
  'English',
  '{sql, postgresql, database}',
  '2020-05-20'
);

INSERT INTO book_details VALUES (
  2,
  '123457890',
  3.95,
  'French',
  '{sql, postgresql, database}',
  '2020-05-20'
);

SELECT
    book.title, book.price, book_details.language, book_details.rating
FROM book
JOIN book_details
ON book.isbn = book_details.book_isbn;

-- In this example, the book_details table has a foreign key book_isbn that
-- references the isbn column in the book table. This establishes a one-to-one
-- relationship between the book and book_details tables, ensuring that each
-- book has a unique set of details and that each set of details belongs to a
-- single book. The UNIQUE constraint on book_isbn ensures that each book can
-- only have one set of details in the book_details table, preventing duplicate
-- entries for the same book.
