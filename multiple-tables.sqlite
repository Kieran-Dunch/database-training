-- In order to efficiently store data, we often spread related information across multiple tables.

-- here are three separate tables:
SELECT *
FROM orders
LIMIT 5;

SELECT *
FROM subscriptions
LIMIT 5;

SELECT *
FROM customers
LIMIT 5;

-- The orders table has information about each order a customer has made.
-- The subscriptions table has information about which subscriptions a customer
-- has.
-- The customers table has information about the customer.
-- if they were all combined into one table, there would be a lot of redundant
-- information.

-- IF we have two tables, orders and subscriptions, and we want to know the
-- names of all the customers who have ordered a subscription, we can use a JOIN
-- clause to combine the two tables.

-- The query below does the following:
-- 1. It selects all the columns from the orders table.
-- 2. It selects the name column from the customers table.
-- 3. It uses the JOIN clause to combine the orders table and the customers
-- table on the customer_id column.

SELECT orders.*,
       customers.name
FROM orders
JOIN customers
ON orders.customer_id = customers.customer_id
LIMIT 5;

-- What if we have two tables that don't perfectly match up?

SELECT COUNT(*)
FROM newspaper;
-- = 60

SELECT COUNT(*)
FROM online;
-- = 65

SELECT COUNT(*)
FROM newspaper
JOIN online
ON newspaper.id = online.id;
-- = 50

-- The query above only returns the rows where there is a match between the
-- newspaper and online tables. If there are rows in newspaper that don't have a
-- corresponding row in online, or vice versa, they won't be included in the
-- result.

-- If we want to include all rows in newspaper, whether there is a corresponding
-- row in online or not, we can use a LEFT JOIN.

SELECT COUNT(*)
FROM newspaper
LEFT JOIN online
ON newspaper.id = online.id;

-- This will include all rows from the newspaper table, and only the rows from
-- the online table that match with the newspaper table.

SELECT *
FROM newspaper
LEFT JOIN online
ON newspaper.id = online.id
WHERE online.id IS NULL;

-- This query will return all the rows in the newspaper table that don't have a
-- corresponding row in the online table, or an online subscription.

-- foreign key
-- A foreign key is a column that contains the primary key to another table.
-- This is used to link two tables together.

-- primary key
-- A primary key is a column that serves a unique identifier for the rows in the
-- table.

SELECT *
FROM classes
JOIN students
  ON classes.id = students.class_id;


-- CROSS JOIN is used to combine all rows from one table with all rows from
-- another table.

-- let's find out how many subscriptions were active in each month.

select COUNT(*)
FROM newspaper
WHERE start_month <= 3 AND end_month >= 3;

select *
FROM newspaper
CROSS JOIN months;

select *
FROM newspaper
CROSS JOIN months
WHERE start_month <= month AND end_month >= month;

SELECT month,
  COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE start_month <= month AND end_month >= month
GROUP BY month;

-- UNION
-- UNION is used to combine the result-set of two or more SELECT statements.
-- Restrictions: The number of columns must be the same in all SELECT statements.
-- The columns must also have similar data types in  the same order

SELECT *
FROM newspaper
UNION
SELECT *
FROM online;

-- WITH clause
-- The WITH clause stores the result of a query in a temporary table using an
-- alias.
-- The temporary table exists only within the execution of the query.

WITH previous_query AS (
  SELECT *
  FROM newspaper
  UNION
  SELECT *
  FROM online
)
SELECT *
FROM previous_query;

-- The WITH clause is useful when you have a complex query that you will use
-- more than once.

-- Find the customer name number of subscriptions they have

WITH previous_query AS (
  SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id
)
SELECT customers.customer_name,
previous_query.subscriptions
FROM previous_query
JOIN customers
	ON customers.customer_id = previous_query.customer_id;
